<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="bb" xml:space="preserve">
    <value>bb</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Database" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Connection\database.db;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="DbFileName" xml:space="preserve">
    <value>database.db</value>
    <comment>name database file</comment>
  </data>
  <data name="DbPath" xml:space="preserve">
    <value>Logic.BD\Connection\</value>
    <comment>path from database file</comment>
  </data>
  <data name="SQL_DELETE_ATHLETE" xml:space="preserve">
    <value>DELETE FROM Athlete WHERE ATHLETE_DNI=@DNI</value>
    <comment>sql command for delete Athletes</comment>
  </data>
  <data name="SQL_DELETE_COMPETITION" xml:space="preserve">
    <value />
  </data>
  <data name="SQL_INSERT_ATHLETE" xml:space="preserve">
    <value>INSERT INTO Athlete VALUES(@DNI, @NAME, @SURNAME, @BIRTH_DATE, @GENDER)</value>
    <comment>sql command for insert values into table Athletes</comment>
  </data>
  <data name="SQL_INSERT_COMPETITION" xml:space="preserve">
    <value />
  </data>
  <data name="SQL_SELECT_ATHLETE" xml:space="preserve">
    <value>SELECT ATHLETE_DNI, ATHLETE_NAME, ATHLETE_SURNAME, ATHLETE_BIRTH_DATE, ATHLETE_GENDER FROM Athlete</value>
    <comment>query sql for return athletes</comment>
  </data>
  <data name="SQL_SELECT_ATHLETES_TIMES" xml:space="preserve">
    <value>SELECT DORSAL, ATHLETE_DNI, ATHLETE_NAME, ATHLETE_SURNAME, ATHLETE_GENDER, INITIAL_TIME, FINISH_TIME, age FROM HasParticipated NATURAL JOIN Enroll NATURAL JOIN Athlete NATURAL JOIN GET_AGE_NOW 
WHERE COMPETITION_ID=@COMPETITION_ID AND ATHLETE_DNI=GET_AGE_NOW.ATHLETE_DNI</value>
  </data>
  <data name="SQL_SELECT_COMPETITION" xml:space="preserve">
    <value>SELECT * FROM Competition</value>
  </data>
  <data name="SQL_SELECT_COMPETITION_STATUS" xml:space="preserve">
    <value>SELECT COMPETITION_ID, COMPETITION_NAME, COMPETITION_TYPE, COMPETITION_KM, COMPETITION_PRICE, COMPETITION_DATE, COMPETITION_STATUS, count(*) as INSCRITOS FROM Competition natural join Enroll
WHERE COMPETITION_STATUS=@STATUS
group by COMPETITION_ID</value>
  </data>
  <data name="SQL_INSERT_HAS_PARTICIPATED" xml:space="preserve">
    <value>INSERT INTO HasParticipated(COMPETITION_ID, ATHLETE_DNI)
select COMPETITION_ID, ATHLETE_DNI
from Enroll
where status=@STATUS</value>
  </data>
  <data name="SQL_SELECT_ATHLETES_STATUS" xml:space="preserve">
    <value>SELECT * FROM ENROLL
WHERE STATUS = @STATUS AND COMPETITION_ID=@COMPETITION_ID
ORDER BY DATE_INSCRIPTION</value>
  </data>
  <data name="SQL_SELECT_ATHLETE_INSCRIPTION" xml:space="preserve">
    <value>SELECT * FROM ENROLL
WHERE COMPETITION_ID=@COMPETITION_ID
ORDER BY DATE_INSCRIPTION, STATUS</value>
  </data>
  <data name="SQL_UPDATE_DORSAL" xml:space="preserve">
    <value>update Enroll
set dorsal=@DORSAL
where COMPETITION_ID=@COMPETITION_ID and ATHLETE_DNI=@DNI and dorsal is null</value>
  </data>
  <data name="SQL_INSERT_ENROLL" xml:space="preserve">
    <value>insert into enroll values (@DNI, @COMPETITION_ID, @STATUS, date('now'), null)</value>
  </data>
  <data name="SQL_SELECT_CATEGORY_IN_COMPETITION" xml:space="preserve">
    <value>select CATEGORY_NAME FROM GET_CATEGORY_COMPETITION where athlete_dni =@DNI and COMPETITION_ID=@COMPETITION_ID</value>
  </data>
  <data name="SQL_SELECT_COMPETITION_CATEGORY" xml:space="preserve">
    <value>select category_name from get_category_competition where competition_id=@COMPETITION_ID</value>
  </data>
  <data name="SQL_SELECT_OPEN_COMPETITION" xml:space="preserve">
    <value>select COMPETITION_ID, COMPETITION_NAME, COMPETITION_TYPE, COMPETITION_KM, COMPETITION_PRICE, INITIAL_DATE, FINISH_DATE, COMPETITION_DATE, COMPETITION_RULES from Competition natural join CompetitionDates where (date('now') between INITIAL_DATE and FINISH_DATE) and  Competition.COMPETITION_STATUS='OPEN'</value>
  </data>
  <data name="SQL_SELECT_COMPETITION_FINISH_LIST" xml:space="preserve">
    <value>select COMPETITION_ID, COMPETITION_NAME, COMPETITION_TYPE, COMPETITION_KM, COMPETITION_PRICE, INITIAL_DATE, FINISH_DATE, COMPETITION_DATE from Competition natural join CompetitionDates
where date('now') not BETWEEN INITIAL_DATE and FINISH_DATE and date('now') &lt; COMPETITION_DATE</value>
  </data>
  <data name="SQL_COUNT_ATHLETE_BY_DNI" xml:space="preserve">
    <value>SELECT count(*) FROM Athlete WHERE ATHLETE_DNI=@DNI</value>
  </data>
  <data name="SQL_SELECT_COMPETITION_TO_INSCRIBE" xml:space="preserve">
    <value>select COMPETITION_ID, COMPETITION_NAME, COMPETITION_TYPE, COMPETITION_KM, COMPETITION_PRICE, INITIAL_DATE, FINISH_DATE, COMPETITION_DATE 
from Competition natural join CompetitionDates 
where date('now') BETWEEN INITIAL_DATE and FINISH_DATE and COMPETITION_STATUS&lt;&gt;'FINISH' and COMPETITION_NUMBER_PLACES &gt; (select count(*) from enroll group by competition_id) AND COMPETITION_ID not in (SELECT COMPETITION_ID FROM ENROLL WHERE ATHLETE_DNI=@DNI)</value>
  </data>
  <data name="SQL_SELECT_COMPETITION_BY_ID" xml:space="preserve">
    <value>select COMPETITION_ID, COMPETITION_NAME, COMPETITION_TYPE, COMPETITION_KM, COMPETITION_PRICE, COMPETITION_DATE,COMPETITION_RULES, COMPETITION_STATUS, COMPETITION_NUMBER_MILESTONE, COMPETITION_SLOPE from Competition where COMPETITION_ID=@ID</value>
  </data>
  <data name="SQL_SELECT_MAX_DORSAL" xml:space="preserve">
    <value>select max(dorsal) from enroll where COMPETITION_ID=@COMPETITION_ID</value>
  </data>
  <data name="SQL_SELECT_ALL_COMPETITIONS" xml:space="preserve">
    <value>select * from Competition</value>
  </data>
  <data name="SQL_SELECT_ATHLETE_BY_DNI" xml:space="preserve">
    <value>SELECT distinct Athlete.ATHLETE_DNI, Athlete.ATHLETE_NAME, 
Athlete.ATHLETE_SURNAME, 
 Competition.Competition_name, Athlete.ATHLETE_GENDER
 FROM Athlete, hasParticipated, competition, enroll
 where Athlete.ATHLETE_DNI = @DNI and enroll.athlete_dni =@DNI and hasparticipated.competition_id = competition.competition_id</value>
  </data>
  <data name="SQL_SELECT_ALL_COMP_INSCRIPTED" xml:space="preserve">
    <value>Select Competition.COMPETITION_NAME, Enroll.STATUS, Enroll.DATE_INSCRIPTION,
 Enroll.DORSAL from Enroll, Competition where Athlete_dni = @DNI
and Competition.COMPETITION_ID = Enroll.COMPETITION_ID</value>
  </data>
  <data name="SQL_SELECT_COMPETITIONS_PARTICIPATED" xml:space="preserve">
    <value>select  Competition.COMPETITION_NAME,Athlete.athlete_gender from Competition, hasparticipated, athlete where Competition.COMPETITION_ID= hasparticipated.COMPETITION_ID and hasparticipated.athlete_dni = @DNI and athlete.athlete_dni = @DNI</value>
  </data>
  <data name="SQL_SELECT_COUNT_DORSALS_BY_COMPETITION" xml:space="preserve">
    <value>select COUNT(*) from Competition natural join Enroll
where COMPETITION_ID = @COMPETITION_ID AND DORSAL IS NOT NULL</value>
  </data>
  <data name="SQL_SELECT_CATEGORY_BY_COMPETITION" xml:space="preserve">
    <value>select ABSOLUT_CATEGORY_ID, NAME, ID_M, ID_F FROM AbsolutCategories, CompetitionCategory
where CompetitionCategory.COMPETITION_ID = @COMPETITION_ID AND CompetitionCategory.ABSOLUT_CATEGORY_ID = AbsolutCategories.ID</value>
  </data>
  <data name="SQL_SELECT_ATHLETES_TIMES_BY_CATEGORY" xml:space="preserve">
    <value>SELECT DORSAL, ATHLETE_DNI, ATHLETE_NAME, ATHLETE_SURNAME, ATHLETE_GENDER, INITIAL_TIME, FINISH_TIME FROM HasParticipated NATURAL JOIN Enroll NATURAL JOIN Athlete NATURAL JOIN CompetitionCategory NATURAL JOIN Category
WHERE COMPETITION_ID=@COMPETITION_ID AND CATEGORY_MIN_AGE &lt;= @AGE AND @AGE &gt;= CATEGORY_MAX_AGE AND ((ATHLETE_GENDER = @GENDER AND CATEGORY_GENDER = @GENDER) OR CATEGORY_GENDER IS NULL)</value>
  </data>
  <data name="SQL_SELECT_ATHLETES_TIMES_BY_GENDER" xml:space="preserve">
    <value>SELECT DORSAL, ATHLETE_DNI, ATHLETE_NAME, ATHLETE_SURNAME, ATHLETE_GENDER, INITIAL_TIME, FINISH_TIME, age FROM HasParticipated NATURAL JOIN Enroll NATURAL JOIN Athlete NATURAL JOIN GET_AGE_NOW 
WHERE COMPETITION_ID=@COMPETITION_ID AND ATHLETE_DNI=GET_AGE_NOW.ATHLETE_DNI  AND ((AGE &gt;= @CATEGORY_MIN_AGE_M AND AGE &lt;= @CATEGORY_MAX_AGE_M) OR (AGE &gt;= @CATEGORY_MIN_AGE_F AND AGE &lt;= @CATEGORY_MAX_AGE_F))</value>
  </data>
  <data name="SQL_SELECT_CATEGORIES" xml:space="preserve">
    <value>SELECT * FROM Category
WHERE CATEGORY_ID = @ID</value>
  </data>
  <data name="SQL_SELECT_PREREGISTERED" xml:space="preserve">
    <value>select ATHLETE_DNI, COMPETITION_ID, COMPETITION_PRICE, DATE_INSCRIPTION from Enroll natural join Competition where status in ('PRE-REGISTERED', 'PREREGISTERED','CANCELED')</value>
  </data>
  <data name="SQL_UPDATE_INSCRIPTION_STATUS" xml:space="preserve">
    <value>update Enroll set status=@STATUS where competition_id=@COMPETITION_ID and athlete_dni=@DNI</value>
  </data>
  <data name="SQL_GET_RULES" xml:space="preserve">
    <value>select competition_rules from competition where competition_id=@COMPETITION_ID</value>
  </data>
  <data name="DefaultCategories" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\DefaultCategories.json;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="SQL_SELECT_PARTIAL_TIMES" xml:space="preserve">
    <value>select ATHLETE_DNI, NUMBER_MILESTONE, TIME from HasParticipated natural join TimesCompetition
where ATHLETE_DNI = @DNI and COMPETITION_ID = @COMPETITION_ID</value>
  </data>
  <data name="SQL_SELECT_ATHLETES_HAS_PARTICIPATED" xml:space="preserve">
    <value>select ATHLETE_DNI, ATHLETE_NAME, ATHLETE_SURNAME, ATHLETE_BIRTH_DATE, ATHLETE_GENDER from Athlete natural join HasParticipated
where COMPETITION_ID = @COMPETITION_ID</value>
  </data>
</root>